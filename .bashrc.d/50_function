# vim:set syntax=sh:

# do git stuff for all directories in current working directory
all () {
    cur_pwd=$(pwd)

    for i in $(ls -d *); do
        if cd ${cur_pwd}/${i}; then

            echo -e "\e[36m$(pwd)\e[0m"
            $@
            if [ $? -ne 0 ] ; then
                >&2 echo -e "\e[31mError in $(pwd)\e[0m"
            fi
            echo

        else
            >&2 echo -e "\e[31mcd to \e[36m${cur_pwd}/${i}\e[31m was not sucessfull. $@ did not execute.\e[0m"
        fi

    done

    cd ${cur_pwd}

    # feature for future:
    # - possibility for aliases
    # - sameline output for short stuff: $all +short -- git status oder all -n -- git status
    #   - echo -n "$(pwd): $(git status)"
    # - specify director(y|ies) with POSIX wildcards (e.g. all -d dir* -- doing_stuff)
    # - bug: if files in folder it will try them -> for read < find -type d
    # help page (-h|--help|no options) -> all [-n] [-d <dir|posix]> [[--] COMMAND]
    #   example --helps: ssh, tig, cp,git,vim
}

# screen hack
function rename_screen_tab () { echo -ne "\x1bk$@\x1b\\"; return 0; }
if [[ "${TERM}" = screen* ]]; then
    echo
    PROMPT_COMMAND="rename_screen_tab ${USER}@${HOSTNAME%%.*};
    ${PROMPT_COMMAND}"
fi

goodnight () {
    if [ -z "$1" ]; then
        local delaytime="1"
    else
        local delaytime="$1"
    fi
    sudo aptitude update && sudo aptitude upgrade && \
    echo -e "\e[31m" && sudo shutdown -h ${delaytime} 2>&1 && echo -e "\e[0m"
}

poshy () {
    printf "$(echo $(__posh_git_echo) | sed 's#\\\[##g' |sed 's#\\\]##g')\n"
}

apvim () {
    vim "$@" && apache2ctl configtest && service apache2 restart
}

ggrep () {
    # just branches + remotes
    git branch -a | tr -d \* | sed '/->/d' | xargs git grep "$1"

    # all revs
    #git grep "$1" $(git rev-list --all)

    #git rev-list --all | (
    #  while read revision; do
    #    git grep -F "$1" $revision
    #  done
    #)
}

llrec () {
    local f="$1"
    while true; do
        ls -ld "$f"
        f=$(dirname "$f")
        if [[ "$f" == "/" || "$f" == "." ]]; then
            ls -ld "$f"
            break
        fi
    done | column -t
}

sshdiff() {
    if [[ "$1" == "-l" ]]; then
        shift
        vimdiff <(eval "$1") <(ssh "$2" ${@:3})
    else
        vimdiff <(ssh "$1" ${@:3}) <(ssh "$2" ${@:3})
    fi
}

ssh3diff() {
    vimdiff <(ssh "$1" ${@:4}) <(ssh "$2" ${@:4}) <(ssh "$3" ${@:4})
}

fixannoyingshit() {
    echo -e "[shitty]\n$1" > /tmp/fixingshit &&\
    shift &&\
    ansible-playbook \
        ~/git/ansible/ansible-lb-and-co/playbooks/general/fix_annoying_shit.yml \
        -i /tmp/fixingshit $@
}

copymode() {
    # features:
    #   - https://github.com/bhilburn/powerlevel9k#disabling--enabling-powerlevel9k
    #     prompt_powerlevel9k_teardown + prompt_powerlevel9k_setup
    #   - ZHS + BASH
    #   - /tmp/copymode.$$ ?
    # ZSH
    echo "icons[LEFT_SEGMENT_SEPARATOR]=$icons[LEFT_SEGMENT_SEPARATOR]" > /tmp/copymode
    echo "POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=($POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS)" >> /tmp/copymode
    echo "POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=($POWERLEVEL9K_LEFT_PROMPT_ELEMENTS)" >> /tmp/copymode
    icons[LEFT_SEGMENT_SEPARATOR]='$'
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=()

    echo copymode on
}

nocopymode() {
    source /tmp/copymode
    echo copymode off
}

recho() {
    echo -e "\e[33m$@\e[0m"
}
ok() {
    echo -e "\e[32m${@:-ok}\e[0m"
    return
}
nok() {
    echo -e "\e[31m${@:-notok}\e[0m"
    return 1
}
isok() {
    rc=$?
    [ $rc -eq 0 ] && ok $1 || nok $2
    return $rc
}

c() {
    bc -l <<<"$@"
}

cs() {
    wal -i "~/Pictures/1440p" --iterative $@
}

profzsh() {
    shell=${1-$SHELL}
    ZPROF=true $shell -i -c exit
}

timezsh() {
    shell=${1-$SHELL}
    for i in $(seq 1 10); do time $shell -i -c exit; done
}

mans(){
    man -k . \
    | fzf -n1,2 --preview "echo {} \
    | cut -d' ' -f1 \
    | sed 's# (#.#' \
    | sed 's#)##' \
    | xargs -I% man %" --bind "enter:execute: \
      (echo {} \
      | cut -d' ' -f1 \
      | sed 's# (#.#' \
      | sed 's#)##' \
      | xargs -I% man % \
      | less -R)"
}

fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" \
  | fzf --ansi --preview "echo {} \
    | grep -o '[a-f0-9]\{7\}' \
    | head -1 \
    | xargs -I % sh -c 'git show --color=always %'" \
        --bind "enter:execute:
            (grep -o '[a-f0-9]\{7\}' \
                | head -1 \
                | xargs -I % sh -c 'git show --color=always % \
                | less -R') << 'FZF-EOF'
            {}
FZF-EOF"
}

function ssh-until-up() {
    while ! ssh $@; do
        sleep 1;
    done
}

function aww() {
    awk "{print ${1}}"
}
